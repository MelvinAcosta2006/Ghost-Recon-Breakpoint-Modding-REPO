import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import os, struct, re, chardet

# Initialize app state
loaded_xml = ""
current_path = ""
next_id = 0
next_index = 1

def find_max_id(xml):
    matches = re.findall(r'<Value Name="BuildColumnMask" Type="UInt32">\d+</Value>.*?ID="(\d+)"', xml, re.DOTALL)
    if not matches:
        matches = re.findall(r'ID="(\d+)"', xml)
    return max(map(int, matches)) if matches else 0

def find_max_index(xml):
    column_indexes = set(map(int, re.findall(r'<BuildColumn[^>]*Index="(\d+)"', xml)))
    for i in range(1, 256):
        if i not in column_indexes:
            return i
    return max(column_indexes) + 1 if column_indexes else 1

def load_file():
    global loaded_xml, current_path, next_id, next_index
    filepath = filedialog.askopenfilename(filetypes=[("XML Files", "*.xml")])
    if not filepath: return
    current_path = filepath
    with open(filepath, 'rb') as file:
        raw_bytes = file.read()
        detected = chardet.detect(raw_bytes)
        try:
            loaded_xml = raw_bytes.decode(detected['encoding'])
            next_id = find_max_id(loaded_xml) + 1
            next_index = find_max_index(loaded_xml)
            update_next_labels()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to decode file: {e}")

def reload_file():
    if not current_path: return
    with open(current_path, 'rb') as file:
        raw_bytes = file.read()
        detected = chardet.detect(raw_bytes)
        try:
            loaded_xml = raw_bytes.decode(detected['encoding'])
            next_id = find_max_id(loaded_xml) + 1
            next_index = find_max_index(loaded_xml)
            update_next_labels()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to reload file: {e}")

def update_next_labels():
    id_label.config(text=f"Next BuildColumn ID: {next_id}")
    index_label.config(text=f"Next Index: {next_index}")

def fill_from_file():
    path = filedialog.askopenfilename()
    if not path: return
    _, ext = os.path.splitext(path)
    ext = ext.lower()
    try:
        with open(path, 'rb') as f:
            f.seek(1)
            id_bytes = f.read(8)
            file_id = struct.unpack('<Q', id_bytes)[0]
        file_entry.delete(0, tk.END)
        file_entry.insert(0, path)
        id_entry.delete(0, tk.END)
        id_entry.insert(0, str(file_id))

        if ext in ['.mesh', '.lodselector']:
            datatype_combo.set('GraphicObject')
        elif ext == '.skeleton':
            datatype_combo.set('Skeleton')
        elif ext == '.buildtable':
            datatype_combo.set('BuildTable')
    except Exception as e:
        messagebox.showerror("Error", f"Could not extract ID: {e}")
    dt_map = {
        'GraphicObject': (3966419799, 1179648, 'Handle'),
        'Skeleton': (615435132, 1179648, 'Handle'),
        'BuildTable': (585940579, 1835008, 'Reference')
    }
    dtype = datatype_combo.get()
    if dtype not in dt_map:
        messagebox.showerror("Missing Info", "Please select a valid DataType")
        return

def generate_dynamic_property():
    dt_map = {
        'GraphicObject': (3966419799, 1179648, 'Handle'),
        'Skeleton': (615435132, 1179648, 'Handle'),
        'BuildTable': (585940579, 1835008, 'Reference')
    }
    dtype = datatype_combo.get()
    if dtype not in dt_map:
        messagebox.showerror("Missing Info", "Please select a valid DataType")
        return

    dt_id, type_val, structure = dt_map[dtype]
    path = file_entry.get()
    file_id = id_entry.get()
    if not path or not file_id:
        messagebox.showerror("Missing Info", "File path or ID is missing")
        return

    short_path = os.path.basename(path)

    if structure == 'Handle':
        ref_block = f'''<Handle>
                        <Value Name="Value" Type="UInt64" Path="{short_path}">{file_id}</Value>
                    </Handle>'''
    else:
        ref_block = f'''<Reference>
                        <FileReference Name="Value" IsGlobal="0" Path="{short_path}">{file_id}</FileReference>
                    </Reference>'''

    generated = f'''
                <DynamicProperty Index="{next_index}">
                    <Value Name="DataType" Type="UInt32" HashName="{dtype}">{dt_id}</Value>
                    <Value Name="Type" Type="UInt32">{type_val}</Value>
                    <Value Name="Unk00" Type="UInt32">0</Value>
                    {ref_block}
                </DynamicProperty>'''

    output_text.delete("1.0", tk.END)
    output_text.insert(tk.END, generated)

def generate_column():
    dt_map = {
        'GraphicObject': (3966419799, 1179648, 'Handle'),
        'Skeleton': (615435132, 1179648, 'Handle'),
        'BuildTable': (585940579, 1835008, 'Reference')
    }
    dtype = datatype_combo.get()
    if dtype not in dt_map:
        messagebox.showerror("Missing Info", "Please select a valid DataType")
        return

    dt_id, type_val, structure = dt_map[dtype]
    global next_id, next_index
    next_id = find_max_id(loaded_xml) + 1
    next_index = find_max_index(loaded_xml)
    col_id = next_id
    prop_id = next_id + 1
    col_index = next_index
    next_id += 2
    update_next_labels()
    generated = f'''
        <BuildColumn ID="{col_id}" Index="{col_index}">
            <Value Name="Pass" Type="Enum" EnumName="BuildColumnPass" ValueName="PropertyModifications2">5</Value>
            <PropertyPath Name="TargetProperty" ID="{prop_id}">
                <List Name="Nodes" />
                <Value Name="TargetMustBeUnique" Type="Bool">True</Value>
                <Value Name="SetWholeArray" Type="Bool">False</Value>
            </PropertyPath>
            <List Name="EntityPositionSelections" Type="ScimitarClass" />
            <Value Name="HasTableRef" Type="Byte">1</Value>
            <List Name="Components" Type="DynamicProperty">
                <DynamicProperty>
                    <Value Name="DataType" Type="UInt32" HashName="{dtype}">{dt_id}</Value>
                    <Value Name="Type" Type="UInt32">1835008</Value>
                    <Value Name="Unk00" Type="UInt32">0</Value>
                    <Reference>
                        <FileReference Name="Value" IsGlobal="0" Path="0">0</FileReference>
                    </Reference>
                </DynamicProperty>
            </List>
        </BuildColumn>'''
    output_text.delete("1.0", tk.END)
    output_text.insert(tk.END, generated)

# GUI Setup
root = tk.Tk()
root.title("BuildTable GUI Generator")
root.geometry("1000x500")

right_frame = tk.Frame(root)
right_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

file_controls = tk.Frame(right_frame)
file_controls.pack()
tk.Button(file_controls, text="Fill from File", command=fill_from_file).pack(pady=2)
file_entry = tk.Entry(file_controls, width=50)
file_entry.pack()
id_entry = tk.Entry(file_controls, width=50)
id_entry.pack()

datatype_combo = ttk.Combobox(right_frame, values=["GraphicObject", "Skeleton", "BuildTable"])
datatype_combo.set("GraphicObject")
datatype_combo.pack(pady=2)

id_label = tk.Label(right_frame, text="Next BuildColumn ID: ?")
id_label.pack()
index_label = tk.Label(right_frame, text="Next Index: ?")
index_label.pack()

tk.Button(right_frame, text="Open BuildTable XML", command=load_file).pack(pady=5)
tk.Button(right_frame, text="Reload XML", command=reload_file).pack(pady=5)
tk.Button(right_frame, text="Generate BuildColumn Template", command=generate_column).pack(pady=5)
tk.Button(right_frame, text="Generate DynamicProperty", command=generate_dynamic_property).pack(pady=5)

output_text = tk.Text(right_frame, height=20, width=80)
output_text.pack()

root.mainloop()
